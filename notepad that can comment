import tkinter as tk
from tkinter import simpledialog, filedialog, messagebox
import json
import os

# Tooltip class to show reminders on hover
class Tooltip:
    def __init__(self, widget):
        self.widget = widget
        self.tip_window = None

    def show(self, text, x, y):
        if self.tip_window or not text:
            return
        self.tip_window = tw = tk.Toplevel(self.widget)
        tw.wm_overrideredirect(True)
        tw.wm_geometry(f"+{x+20}+{y+20}")
        label = tk.Label(tw, text=text, background="lightyellow", relief="solid", borderwidth=1)
        label.pack(ipadx=1)

    def hide(self):
        if self.tip_window:
            self.tip_window.destroy()
            self.tip_window = None

# Notepad class
class CommentNotepad:
    def __init__(self, root, filepath=None):
        self.root = root
        self.root.title("Comment Notepad")

        # Menu bar
        menubar = tk.Menu(root)
        filemenu = tk.Menu(menubar, tearoff=0)
        filemenu.add_command(label="New", command=self.new_window)
        filemenu.add_command(label="Open", command=self.open_file)
        filemenu.add_command(label="Save", command=self.save_file)
        filemenu.add_command(label="Save As", command=self.save_file_as)
        filemenu.add_separator()
        filemenu.add_command(label="Exit", command=root.destroy)
        menubar.add_cascade(label="File", menu=filemenu)
        root.config(menu=menubar)

        self.text = tk.Text(root, wrap='word', width=80, height=25)
        self.text.pack(padx=10, pady=10)

        self.text.bind("<Button-3>", self.add_comment)
        self.text.bind("<Motion>", self.on_hover)
        self.text.bind("<Leave>", lambda e: self.tooltip.hide())

        self.comments = {}
        self.tooltip = Tooltip(self.text)
        self.tag_count = 0
        self.filepath = filepath

        if filepath:
            self.load_from_file(filepath)

    # New window
    def new_window(self):
        new_root = tk.Toplevel()
        CommentNotepad(new_root)

    # Add a comment to selected text
    def add_comment(self, event=None):
        try:
            start = self.text.index("sel.first")
            end = self.text.index("sel.last")
            comment = simpledialog.askstring("Add Comment", "Enter your reminder/comment:")
            if comment:
                tag_name = f"comment{self.tag_count}"
                self.tag_count += 1
                self.text.tag_add(tag_name, start, end)
                self.text.tag_config(tag_name, background="lightblue")
                self.comments[tag_name] = {
                    "comment": comment,
                    "start": start,
                    "end": end
                }
        except tk.TclError:
            pass  # No selection

    # Hover check
    def on_hover(self, event):
        index = self.text.index(f"@{event.x},{event.y}")
        tags = self.text.tag_names(index)
        for tag in tags:
            if tag in self.comments:
                self.tooltip.show(self.comments[tag]["comment"], event.x_root, event.y_root)
                return
        self.tooltip.hide()

    # Save to file
    def save_file(self):
        if self.filepath:
            self.write_to_file(self.filepath)
        else:
            self.save_file_as()

    # Save As
    def save_file_as(self):
        path = filedialog.asksaveasfilename(defaultextension=".cnotepad", filetypes=[("Comment Notepad", "*.cnotepad")])
        if path:
            self.filepath = path
            self.write_to_file(path)

    # Open file
    def open_file(self):
        path = filedialog.askopenfilename(defaultextension=".cnotepad", filetypes=[("Comment Notepad", "*.cnotepad")])
        if path:
            new_root = tk.Toplevel()
            CommentNotepad(new_root, filepath=path)

    # Write data
    def write_to_file(self, path):
        data = {
            "text": self.text.get("1.0", "end-1c"),
            "comments": self.comments
        }
        try:
            with open(path, 'w') as file:
                json.dump(data, file)
            self.root.title(f"Comment Notepad - {os.path.basename(path)}")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save: {e}")

    # Load from file
    def load_from_file(self, path):
        try:
            with open(path, 'r') as file:
                data = json.load(file)
            self.text.delete("1.0", "end")
            self.text.insert("1.0", data.get("text", ""))
            self.comments = data.get("comments", {})
            # Restore tags
            for tag, info in self.comments.items():
                self.text.tag_add(tag, info["start"], info["end"])
                self.text.tag_config(tag, background="lightblue")
                self.tag_count += 1
            self.root.title(f"Comment Notepad - {os.path.basename(path)}")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to open file: {e}")

# Run the app
if __name__ == "__main__":
    root = tk.Tk()
    CommentNotepad(root)
    root.mainloop()
