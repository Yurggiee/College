import tkinter as tk
from tkinter import simpledialog

# Tooltip class to show reminders on hover
class Tooltip:
    def __init__(self, widget):
        self.widget = widget
        self.tip_window = None

    # # Show the tooltip with the comment text
    def show(self, text, x, y):
        if self.tip_window or not text:
            return
        self.tip_window = tw = tk.Toplevel(self.widget)
        tw.wm_overrideredirect(True)  # # Remove window borders
        tw.wm_geometry(f"+{x+20}+{y+20}")  # # Position near the mouse
        label = tk.Label(tw, text=text, background="lightyellow", relief="solid", borderwidth=1)
        label.pack(ipadx=1)

    # # Hide the tooltip
    def hide(self):
        if self.tip_window:
            self.tip_window.destroy()
            self.tip_window = None

# Main notepad class
class CommentNotepad:
    def __init__(self, root):
        self.root = root
        self.root.title("Comment Notepad")

        # # Create a text area for writing
        self.text = tk.Text(root, wrap='word', width=80, height=25)
        self.text.pack(padx=10, pady=10)

        # # Bind right-click to add a comment
        self.text.bind("<Button-3>", self.add_comment)

        # # Dictionary to store tag names and their comments
        self.comments = {}

        # # Tooltip object for hover display
        self.tooltip = Tooltip(self.text)

        # # Check if mouse is over a tagged word
        self.text.bind("<Motion>", self.on_hover)
        self.text.bind("<Leave>", lambda e: self.tooltip.hide())

        # # Counter to give each comment a unique tag
        self.tag_count = 0

    # # Adds a comment to highlighted text
    def add_comment(self, event=None):
        try:
            # # Get selected text range
            start = self.text.index("sel.first")
            end = self.text.index("sel.last")

            # # Ask the user for the comment
            comment = simpledialog.askstring("Add Comment", "Enter your reminder/comment:")

            if comment:
                # # Create a unique tag name
                tag_name = f"comment{self.tag_count}"
                self.tag_count += 1

                # # Tag the selected text with a background color
                self.text.tag_add(tag_name, start, end)
                self.text.tag_config(tag_name, background="lightblue")

                # # Save the comment in the dictionary
                self.comments[tag_name] = comment
        except tk.TclError:
            # # If no text is selected, ignore
            pass

    # # Check if hovering over tagged text and show tooltip
    def on_hover(self, event):
        index = self.text.index(f"@{event.x},{event.y}")
        tags = self.text.tag_names(index)

        for tag in tags:
            if tag in self.comments:
                self.tooltip.show(self.comments[tag], event.x_root, event.y_root)
                return
        self.tooltip.hide()

# # Create and run the app
if __name__ == "__main__":
    root = tk.Tk()
    app = CommentNotepad(root)
    root.mainloop()
